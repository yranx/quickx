1.《重构，改善既有代码的设计》 -- Martin Fowler
好的测试是重构的根本
该测试必须有自我检验能力
    P34（1）如何切开长函数，并把较小块代码移至更合适的类
        step1:找出代码的逻辑泥团（如本例的switch）
            s1.找出函数内的局部变量和参数（如each[未被修改]和thisAmount[被修改]），任何不会被修改的变量可以当成参数传入新函数，
            只有一个变量被修改的话，可当做返回值
            s2.酌情更改新函数的变量名，写出人能懂的代码,代码要表现出自己的目的
        step2:搬移代码块，由于改代码块未使用该类中信息，需要搬到相关类中,注意相关参数要去除了，且更换了函数名
        step3:去除不必要的多次跳转，去除临时变量(无用中继跳转的直接去掉，需要值得用查询来取代)
        step4:分清责任，提炼到相关类，在自身上运用数据
        step5:非该类本身的，替换因条件而异的代码，提出稳定条件的代码到对应类中
            运用多态取代switch,注意在生命周期内，哪些是自身可以修改的，哪些是自身不能修改的
    P78 重构(名词):对软件内部结构的一种调整，目的是在不改变软件外部观察行为的前提下，提高其可理解性，降低其修改成本
                有助于深入理解代码
                事不过三，三则重构，任何时间（添加功能时、修补错误时、复审代码时）都可以重构
    P101 坏味道： 重复代码、过长函数（每当感觉需要注释来说明的时候，把需要说明的东西写进一个独立函数中）
        （条件表达式和循环常常也是提炼的信号）、过大的类（通过客户端的使用，为每一种使用方式提炼一个接口）、
        过长参数列、发散式变化（某个类经常因不同的原因在不同的方向上发生变化）、霰弹式修改（遇到某种变化，都必须在许多不同的类中做出小修改）、
        （可将需修改的代码放进同一个类，若眼下没合适类放置，就创造一个）、依恋情节（将总一起变化的东西放一块）、
        数据泥团(减少字段和参数的个数)、基本类型偏执（将原本单独存在的数据值替换为对象）、
        switch(用多态替换，switch语句常常根据类型码进行选择，需要的是'与该类型码相关的函数或类')、
        平行继承体系（某个继承体系的类名称前缀和另一个类名称前缀完全相同）（让一个继承体系的实例引用另一个继承体系的实例）、
        冗赘类（一个类所得不值其身价，就应当消失）、未来性（处理一些非必要的事情，如果多余请除掉）、
        令人迷惑的暂时字段（对象中某个实例变量仅为某种特定情况而设）（提炼所有和该变量的代码到新类中）、
        过度耦合的消息链（观察消息链的最终的对象的用处，看看是否能提炼该对象的代码到一个独立函数，再将该函数推入消息链）、
        Middle Man(中间人)（跨过过度委托，直接和真正负责的对象打交道）、狎昵关系（分开两个类，比如继承关系的，或者将两个的类共同点提炼出来）、
        异曲同工的类（根据用途重新命名，移动方法将某些行为移入类）、不完美的库类、
        纯粹的数据类（仅仅是数据容器）（私有化其字段，封装好,且搬移来取值/设值函数）、
        过多的注释（好的代码已经说清楚了）
    P114 自测试代码：建议建立一个独立类用于测试，并在一个框架中运行它。
        JUnit

        小步前进，频繁测试
    P135 1)提炼函数：将过长函数中一段代码放进一个独立函数中，让函数名称解释函数的用途
         2)内联函数,在函数调用点插入函数本体，然后移除该函数
         3）将赋值给临时变量直接改为表达式赋值形式，去除掉临时变量（可将临时变量声明为final,来检查他们是否的确只被赋值一次）
         4）用查询或查询函数替代临时变量
         5)引入解释性变量：将复杂表达式（或者其中一部分）的结果放进一个临时变量，以解释表达式
         6）分解同一个被多次用于不同用途的临时变量为各自用途时的新异名变量
         7）移除对参数的赋值，参数只作为被传递进来的东西
         8）以函数对象取代函数，将一个函数放进一个单独对象中，局部变量就变成了对象中的字段，在该对象中就可以分解大型函数为
         多个小型函数
         9) 替换算法：将某个算法替换为另一个更清晰的算法
    P167 1）搬移函数： 使用另一个对象的次数比只用自己所驻对象的次数还多
            搬移字段：在目标类新建一个字段，修改源字段的所有用户，令它们改用新字段
            提炼类： 某个类做了应该由两个类做的事，建立一个新类，将相关字段和函数从旧类搬移到新类
            将类内联化： 将这个类的所有特性搬移到另一个类中，然后移除原类
            隐藏“委托关系”：将直接调用一个对象通过一个委托类来调用
            移除中间人：某个类做了过多的简单委托动作   让客户直接调用受托类，跳过委托类
            引入外加函数：建立一个函数，以第一函数的形式春如一个实例
            引入本地扩展：对源码进行 子类化和包装，提供源类的一切特性，同时添加新特性

2.Netty 04:40
  (1)telnet
        Telnet协议是TCP/IP协议族的其中之一，是Internet远程登录服务的标准协议和主要方式，
    常用于网页服务器的远程控制，可供使用者在本地主机运行远程主机上的工作。使用者首先在电脑执行Telnet程序，连线至目的地服务器，然后输入帐号和密码以验证身份。
    使用者可以在本地主机输入命令，然后让已连接的远端主机执行，就像直接在对方的控制台上输入一样。传统Telnet会话所传输的资料并未加密，帐号和密码等敏感资料容易会被窃听，
    因此很多服务器都会封锁Telnet服务，改用更安全的SSH。
        ping通常是用来检查网络是否通畅或者网络连接速度的命令;
        telnet是用来探测指定ip是否开放指定端口的。
        程序和功能->启用或关闭Windows功能->勾选Telnet客户端

     启动服务，cmd:telnet 127.0.0.1 监听端口 进入输入界面，ctrl+]进入命令界面

  (2)netty版本大致版本分为  netty3.x  和  netty4.x（推荐）、netty5.x（重大bug,放弃）
    流行的Java Nio网络通信框架
    能够接收TCP、Http、Websocket、Https、UDP等协议发来的通信消息
    高性能服务器

  (3)ELK (LogStash、Elasticsearch、Kibana)
    LogStash:tcp监听netty服务器发送的消息，并把消息处理好后转发给ES
    Elasticsearch：接收LogStash发送来的数据，并进行分词构建索引
    Kibana：主要从ES中获取相关的索引的数据进行检索、分析 （页面展示）

3.网络安全通信---AES+BASE64
  https://www.imooc.com/article/49811
  https://www.cnblogs.com/hailiang/archive/2012/02/29/2373154.html
      网络层封装的一套加密、解密，编码、解码的规则
      身份校验--MD5算法
          no.1 身份校验：校验访问接口的用户合法性，就是过滤掉那些通过脚本或者其他非正常app发起的访问请求
          no.2 MD5算法： MD5算法可以对一串输入生成一串唯一的不可逆的128bit的0和1的二进制串信息。
                         通常 app 都会在发起请求前根据自己公司所定义的规则做一次 MD5 计算，作为 token 发送给服务端进行校验。
                         MD5 有两个特性：唯一性和不可逆性。
          no.3 16位和32位的MD5值:  md5计算工具 http://www.cmd5.com/
                         MD5计算后输出是 128 bit 的 0 和 1 二进制串，1个十六进制是 4 个 bit，128 / 4 = 32，所以常说的 32 位的 MD5 指的是用十六进制来表示的输出串。
                         那么，为什么还会有 16 位的 MD 值？其实也就是嫌 32 位的数据太长了，所以去掉开头 8 位，末尾 8 位，截取中间的 16 位来作为 MD5 的输出值。
                         所以，MD5 算法的输出只有一种：128 bit 的二进制串，而通常结果都用十六进制表示而已。
          no.4 MD5的应用：数字签名、身份校验、完整性（一致性）校验
                          【app 持有一串密钥，这串密钥服务端也持有，除此外别人都不知道，因此 app 就可以跟服务端协商，
                           两边统一下交互的时候都有哪些数据是需要加入 MD5 计算的，以怎样的规则拼接进行 MD5 运算的，
                           这样一旦这些数据被三方攻击者篡改了，也能检查出来。
                           也就是说，密钥和拼接规则都是关键点，不可以泄漏出去。】
      敏感数据加密 -- AES + BASE64
          UTF-8 + AES + BASE64
              no.1 UTF-8 和 BASE64 都属于编解码，AES 属于对称加密算法。
              no.2 信息其实本质上是由二进制串组成，通过各种不同的编码格式，来将这段二进制串信息解析成具体的数据
              AES 属于对称加密算法，对称的意思是说，加密方和解密方用的是同一串密钥。
              信息经过加密后会变成一串毫无规律的二进制串，此时再选择一种编码方式来展示，通常是 BASE64 格式的编码。
              no.3 BASE64 编码是将所有信息都编码成只用大小写字母、0-9数字以及 + 和 / 64个字符表示，所有称作 BASE64。
              no.4 需要注意的是，因为 AES 加解密时输入和输出都是二进制串的信息，因此，在发送时需先将明文通过 UTF-8 解码成二进制串，然后进行加密，
              再对这串二进制密文通过 BASE64 编程成密文串发送给接收方。

          AES 加解密模式分很多种，首先，它有三种密钥形式，分别是 128 bit，192 bit，256 bit
          AES 还分四种模式的加解密算法：ECB，CBC，CFB，OFB
          最后一点，使用 CBC 模式进行加密时，是对明文串进行分组加密的，每组的大小都一样，因此在分组时就有可能会存在最后一组的数量不够的情况，那么这时就需要进行填充，
          而这个填充的概念就是 PKCS5Padding 和 PKCS7Padding 两种。
          这两种的填充规则都一样，区别只在于分组时规定的每组的大小。在PKCS5Padding中，明确定义 Block 的大小是 8 位，
          而在 PKCS7Padding 定义中，对于块的大小是不确定的，可以在 1-255 之间。

4.JUC相关20190828
https://www.cnblogs.com/linkworld/p/7819270.html
https://blog.csdn.net/china_wanglong/article/details/38828407

CountDownLatch(闭锁)
同步锁(Lock)
ReadWriteLock(读写锁)

JUC 简介
在 Java 5.0 提供了 java.util.concurrent(简称JUC)包,在此包中增加了在并发编程中很常用的工具类,
用于定义类似于线程的自定义子系统,包括线程池,异步 IO 和轻量级任务框架;
还提供了设计用于多线程上下文中的 Collection 实现等;

1.JUC包
Atomic : AtomicInteger
Locks : Lock, Condition, ReadWriteLock
Collections : Queue, ConcurrentMap
Executer : Future, Callable, Executor
Tools : CountDownLatch, CyclicBarrier, Semaphore

2. volatile 关键字
volatile 关键字: 当多个线程进行操作共享数据时,可以保证内存中的数据是可见的;
相较于 synchronized 是一种较为轻量级的同步策略;
volatile 不具备"互斥性";
volatile 不能保证变量的"原子性";

volatile语义：
volatile实现了类似synchronized的语义，却又没有锁机制。它确保对  volatile字段的更新以可预见的方式告知其他的线程。

Java 存储模型不会对volatile指令的操作进行重排序：这个保证对volatile变量的操作时按照指令的出现顺序执行的。
volatile变量不会被缓存在寄存器中（只有拥有线程可见），每次总是从主存中读取volatile变量的结果。
ps：volatile并不能保证线程安全的，也就是说volatile字段的操作不是原子性的，volatile变量只能保证可见性。

3.JDK1.5 以后, java.util.concurrent.atomic包下,提供了常用的原子变量;
原子变量中的值,使用 volatile 修饰,保证了内存可见性;
CAS(Compare-And-Swap) 算法保证数据的原子性;

 CAS 算法
CAS(Compare-And-Swap) 算法是硬件对于并发的支持,针对多处理器操作而设计的处理器中的一种特殊指令,
用于管理对共享数据的并发访问;
CAS 是一种无锁的非阻塞算法的实现;
CAS 包含了三个操作数:
	需要读写的内存值: V
	进行比较的预估值: A
	拟写入的更新值: B
当且仅当 V == A 时, V = B, 否则,将不做任何操作;

4.并发容器类
Java 5.0 在 java.util.concurrent 包中提供了多种并发容器类来改进同步容器的性能;
1.ConcurrentHashMap 同步容器类是 Java5 增加的一个线程安全的哈希表;介于 HashMap 与 Hashtable 之间;
内部采用"锁分段"机制替代Hashtable的独占锁,进而提高性能;

此包还提供了设计用于多线程上下文中的Collection实现:
ConcurrentHashMap,ConcurrentSkipListMap,ConcurrentSkipListSet, CopyOnWriteArrayList 和 CopyOnWriteArraySet;
当期望许多线程访问一个给定collection时,ConcurrentHashMap通常优于同步的HashMap; ConcurrentSkipListMap通常优于同步的TreeMap;
当期望的读数和遍历远远大于列表的更新数时, CopyOnWriteArrayList优于同步的ArrayList;

CountDownLatch(闭锁)是一个同步辅助类,在完成一组正在其他线程中执行的操作之前,它允许一个或多个线程一直等待;

5.相较于实现 Runnable 接口的方式,实现 Callable 接口类中的方法可以有返回值,并且可以抛出异常 【看一下笔记】

6.非静态方法的锁默认为 this, 静态方法的锁为 "对应的Class实例";

7.
synchronized：隐式锁，同步代码块、同步方法Jdk1.5后：同步锁Lock，是一种显式锁 ，需要通过lock()方式上锁，必须通过unlock方法进行释放锁；

7.线程池
线程池提供了一个线程队列,队列中保存着所有等待状态的线程;
避免了创建与销毁线程的额外开销,提高了响应速度;

线程池的体系结构
java.util.concurrent.Executor: 负责线程的使用和调度的根接口;
ExecutorService: 子接口,线程池的主要接口;
ThreadPoolExecutor: 线程池的实现类;
ScheduledExecutorService: 子接口,负责线程的调度;
ScheduledThreadPoolExecutor: 继承了线程池的实现类,实现了负责线程调度的子接口;

工具类: Executors
ExecutorService newFixedThreadPool(): 创建固定大小的线程池;
ExecutorService newCachedThreadPool(): 缓存线程池,线程池中线程的数量不固定,可以根据需求自动更改数量;
ExecutorService newSingleThreadExecutor(): 创建单个线程池, 线程池中只有一个线程;
ScheduledExecutorService newScheduledThreadPool(): 创建固定大小的线程,可以延时或定时的执行任务;

8.AtomicInteger：
int addAndGet(int delta)：将给定值与当前值相加。 即为线程安全版本的: i =i+delta。
boolean compareAndSet(int expect, int update)：如果当前值 == 预期值，则将该值设置为给定的更新值。 如果成功就返回true，否则返回false，并且不修改原值。
int getAndAdd(int delta)：将给定值与当前值相加。  即为线程安全版本的t=i;i+=delta;return t;操作。
int getAndDecrement()：将当前值减 1。  即为线程安全版本的i–-操作。
int getAndIncrement()：将当前值加 1。  即为线程安全版本的i++操作。
int decrementAndGet()：将当前值减 1。  即为线程安全版本的–-i操作。
int incrementAndGet()：将当前值加 1。  即为线程安全版本的++i操作。
int getAndSet(int newValue)：设置为给定值，并返回旧值。  即为线程安全版本的t=i;i=newValue;return t;操作。

9. Lock 锁
Synchronized属于独占锁，高并发时性能不高，JDK5以后开始用JNI实现更高效的锁操作。

Lock—->
ReentrantLock—->
ReentrantReadWriteLock.ReadLock / ReentrantReadWriteLock.writeLock
ReadWriteLock—-> ReentrantReadWriteLock
LockSupport
Condition

方法名称														作用
void lock()												获取锁。如果锁不可用，出于线程调度目的，将禁用当前线程，并且在获得锁之前，该线程将一直处于休眠状态。
void lockInterruptibly() throws InterruptedException;	如果当前线程未被中断，则获取锁。如果锁可用，则获取锁，并立即返回。
Condition newCondition();								返回绑定到此 Lock 实例的新 Condition实例
boolean tryLock();										仅在调用时锁为空闲状态才获取该锁
boolean tryLock(long time, TimeUnit unit) throws InterruptedException;	如果锁在给定的等待时间内空闲，并且当前线程未被中断，则获取锁
void unlock();											释放锁
注：一般来说，获取锁和释放锁是成对儿的操作，这样可以避免死锁和资源的浪费。在 finally 里面做释放锁的操作
